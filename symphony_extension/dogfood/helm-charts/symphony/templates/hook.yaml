# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: {{ .Chart.Name }}-hook
#   annotations:
#     helm.sh/hook: pre-delete, pre-upgrade
# rules:
#   - apiGroups: ["fabric.symphony", "solution.symphony"]
#     resources: ["target", "instance"]
#     verbs: ["*"]
# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: {{ .Chart.Name }}-hook
#   annotations:
#     helm.sh/hook: pre-delete, pre-upgrade
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: {{ .Chart.Name }}-hook
#   annotations:
#     helm.sh/hook: pre-install
# subjects:
#   - kind: ServiceAccount
#     namespace: {{ .Release.Namespace }}
#     name: {{ .Chart.Name }}-hook
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: {{ .Chart.Name }}-hook
# ---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-delete, post-delete, pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      serviceAccountName: symphony-user
      restartPolicy: Never
      containers:
      - name: clean-resources-job
        image: "k8s.gcr.io/hyperkube:v1.12.1"
        imagePullPolicy: "IfNotPresent"
        command:
        - /bin/sh
        - -c
        - >
            kubectl get target --no-headers=true | awk '{print $1}' | xargs kubectl patch target.fabric.symphony -p '{"metadata":{"finalizers":null}}' --type=merge || true;
            kubectl get instance --no-headers=true | awk '{print $1}' | xargs kubectl patch instance.solution.symphony -p '{"metadata":{"finalizers":null}}' --type=merge || true;