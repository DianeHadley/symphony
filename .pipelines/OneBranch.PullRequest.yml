#################################################################################
#                      OneBranch Pipelines - PR Build                           #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none # https://aka.ms/obpipelines/triggers

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 0
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none
  LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2004:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # credscan:
      #   suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      binskim:
        break: true # always break the build on binskim issues. You can disable it by setting to 'false'
      policheck:
        break: true # always break the build on policheck issues. You can disable it by setting to 'false'
      # suppression:
      #   suppressionFile: $(Build.SourcesDirectory)\.gdn\global.gdnsuppress

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: Linux  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs add Mac & WSL
          vmImage: '$(LinuxContainerImage)'
        
        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: '$(REPOROOT)\out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
          ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl

          # ob_sdl_suppression_suppressionFile: $(Build.SourcesDirectory)\.gdn\build.nonofficial.gdnsuppress

        steps:
        - task: GoTool@0
          displayName: 'Install Go 1.19'
          inputs:
           version: '1.19' 

        - task: Go@0
          displayName: 'Run go mod vendor in Symphony API'
          inputs:
            command: 'custom'
            customCommand: 'mod'
            arguments: 'vendor'
            workingDirectory: '$(REPOROOT)/api'

        - task: Go@0
          displayName: 'Build Symphony API'
          inputs:
            command: 'build'
            arguments: '-o $(OUTPUTROOT)/symphony-api'
            workingDirectory: '$(REPOROOT)/api'

        - task: Go@0
          displayName: 'Run go mod vendor in K8S'
          inputs:
            command: 'custom'
            customCommand: 'mod'
            arguments: 'vendor'
            workingDirectory: '$(REPOROOT)/k8s' 

        - task: Go@0
          displayName: 'Build Symphony K8s'
          inputs:
            command: 'build'
            arguments: '-o .$(OUTPUTROOT)/symphony-k8s'
            workingDirectory: '$(REPOROOT)/k8s'

        - task: Go@0
          displayName: 'Test Symphony API'
          inputs:
            command: 'test'
            arguments: '-v ./...'
            workingDirectory: '$(REPOROOT)/api'

        - task: Go@0
          displayName: 'Test Symphony K8s'
          continueOnError: true
          inputs:
            command: 'test'
            arguments: '-v ./...'
            workingDirectory: '$(REPOROOT)/k8s'

        - task: PublishBuildArtifacts@1
          inputs:
            artifactName: drop
            pathToPublish: $(OUTPUTROOT)
