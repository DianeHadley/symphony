name: $(Date:yyyyMMdd)$(Rev:.r)-buddy
parameters: []
trigger:
  batch: true
  branches:
    include:
      - main
variables:
  LinuxContainerImage: mcr.microsoft.com/onebranch/cbl-mariner/build:2.0
  DEBIAN_FRONTEND: noninteractive
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  ComponentDetection.Timeout: 1200
  DisableGoCliScan: true
resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main
extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates
  parameters:
    globalSdl:
      policheck:
        break: true
      tsa:
        enabled: false
    stages:
      - stage: prebuild
        jobs:
          - job: prebuild
            pool:
              type: linux
            variables:
              ob_outputDirectory: $(Build.SourcesDirectory)
              ob_sdl_binskim_scanOutputDirectoryOnly: true
              ob_sdl_codeSignValidation_legacyCiPolicyConfig: true
            steps:
              - task: NodeTool@0
                displayName: Install Node.js
                inputs:
                  versionSpec: 16.x
              - task: npmAuthenticate@0
                continueOnError: true
                displayName: configure npmrc in .setup/pipelines
                inputs:
                  workingFile: .setup/pipelines/.npmrc
              - task: GoTool@0
                displayName: Install Go 1.20
                condition: ne(variables['Agent.OS'], 'Windows_NT')
                inputs:
                  version: '1.20'
              - task: Go@0
                displayName: Install install mage
                condition: ne(variables['Agent.OS'], 'Windows_NT')
                inputs:
                  command: install
                  arguments: github.com/magefile/mage@latest
              - task: Bash@3
                displayName: Prepare Helm Chart
                condition: ne(variables['Agent.OS'], 'Windows_NT')
                inputs:
                  targetType: inline
                  script: |-
                    #!/bin/env bash
                    set -e
                    BUILD_NUMBER="$(Build.BuildNumber)"

                    pushd "k8s" || exit 1
                    $HOME/go/bin/mage helmTemplate
                    popd || exit 1

                    pushd "symphony-extension/helm/symphony" || exit 1

                    # Update values.yaml
                    sed -i "s/\(\s*tag: \).*/\1\"$BUILD_NUMBER\"/" values.yaml

                    # Update Chart.yaml
                    sed -i "s/\(^appVersion: \).*/\1\"$BUILD_NUMBER\"/" Chart.yaml
                    sed -i "s/\(^version: \).*/\1\"$BUILD_NUMBER\"/" Chart.yaml
      - stage: build
        dependsOn: prebuild
        jobs:
          - job: build_1
            pool:
              type: docker
              os: linux
            variables: {}
            steps:
              - task: DownloadPipelineArtifact@2
                displayName: Download artifacts
                inputs:
                  targetPath: $(Build.SourcesDirectory)/dst/drop_prebuild_prebuild
                  artifact: drop_prebuild_prebuild
              - task: onebranch.pipeline.containercontrol@1
                displayName: Login to ACR symphonycr
                inputs:
                  command: login
                  acr_name: symphonycr
                  tenant: MSFT
                  endpoint: symphony_corp_acr
              - task: onebranch.pipeline.imagebuildinfo@1
                continueOnError: true
                displayName: Build symphony-api
                inputs:
                  repositoryName: symphony-api
                  dockerFileRelPath: drop_prebuild_prebuild/api/Dockerfile
                  dockerFileContextPath: drop_prebuild_prebuild/./
                  registry: symphonycr.azurecr.io
                  saveImageToPath: symphony-api.tar
                  buildkit: 1
                  enable_network: true
                  enable_cache: false
                  arguments: ' --build-arg VSS_NUGET_EXTERNAL_FEED_ENDPOINTS --build-arg VSS_NUGET_URI_PREFIXES --build-arg VSS_NUGET_ACCESSTOKEN'
                  build_tag: $(Build.BuildNumber)
                  enable_isolated_acr_push: false
                  enable_service_tree_acr_path: false
                  enable_acr_push: true
                  endpoint: symphony_corp_acr
              - task: onebranch.pipeline.imagebuildinfo@1
                continueOnError: true
                displayName: Build symphony-k8s
                inputs:
                  repositoryName: symphony-k8s
                  dockerFileRelPath: drop_prebuild_prebuild/k8s/Dockerfile
                  dockerFileContextPath: drop_prebuild_prebuild/./
                  registry: symphonycr.azurecr.io
                  saveImageToPath: symphony-k8s.tar
                  buildkit: 1
                  enable_network: true
                  enable_cache: false
                  arguments: ' --build-arg VSS_NUGET_EXTERNAL_FEED_ENDPOINTS --build-arg VSS_NUGET_URI_PREFIXES --build-arg VSS_NUGET_ACCESSTOKEN'
                  build_tag: $(Build.BuildNumber)
                  enable_isolated_acr_push: false
                  enable_service_tree_acr_path: false
                  enable_acr_push: true
                  endpoint: symphony_corp_acr
      - stage: postbuild
        jobs:
          - job: postbuild
            pool:
              type: linux
              isCustom: true
              name: Azure Pipelines
              vmImage: ubuntu-latest
            variables:
              ob_outputDirectory: $(Build.SourcesDirectory)/ob_outputDirectory_helm
            steps:
              - checkout: self
                persistCredentials: true
              - task: DownloadPipelineArtifact@2
                displayName: Download artifacts
                inputs:
                  targetPath: $(Build.SourcesDirectory)/dst/drop_prebuild_prebuild
                  artifact: drop_prebuild_prebuild
              - task: HelmInstaller@0
                displayName: Install Helm
                inputs:
                  helmVersion: 3.10.1
                  installKubectl: true
                  kubectlVersion: 1.25.3
              - task: Docker@2
                displayName: Login to Helm ACR
                inputs:
                  containerRegistry: symphony_corp_acr
                  command: login
                  addPipelineData: false
                  addBaseImageData: false
              - task: Bash@3
                displayName: Package/Push Helm Charts to ACR
                condition: ne(variables['Agent.OS'], 'Windows_NT')
                inputs:
                  targetType: inline
                  script: |-
                    #!/bin/bash
                    set -e
                    mkdir ob_outputDirectory_helm
                    echo "HELM_RELEASE_NAME,HELM_CHART_LOCATION,HELM_CHART_VERSION" >> ./ob_outputDirectory_helm/helmChartVersions.csv

                    HELM_PACKAGE_OUTPUT=$(helm package ./symphony-extension/helm/symphony -d ./symphony-extension/helm/symphony)
                    HELM_PACKAGE_OUTPUT_TRIM_FORWARD_SLASH="${HELM_PACKAGE_OUTPUT##*/}"
                    HELM_PACKAGE_NAME="${HELM_PACKAGE_OUTPUT_TRIM_FORWARD_SLASH##*\\}"
                    HELM_RELEASE_NAME=$(helm show chart ./symphony-extension/helm/symphony | sed -n -e '/^name: /p' | sed 's/name: //')
                    helm push "./symphony-extension/helm/symphony/$HELM_PACKAGE_NAME" oci://symphonycr.azurecr.io/helm
                    HELM_CHART_LOCATION="oci://symphonycr.azurecr.io/helm/$HELM_RELEASE_NAME"
                    echo "$HELM_RELEASE_NAME,$HELM_CHART_LOCATION" >> ./ob_outputDirectory_helm/helmChartVersions.csv
                  workingDirectory: $(Build.SourcesDirectory)/dst/drop_prebuild_prebuild
              - task: PublishPipelineArtifact@1
                displayName: Publish helm artifacts
                inputs:
                  targetPath: $(Build.SourcesDirectory)/dst/drop_prebuild_prebuild/ob_outputDirectory_helm
                  publishLocation: pipeline
                  artifact: drop_postbuild_postbuild
              - task: AzureCLI@2
                displayName: Lock artifacts in ACR
                condition: ne(variables['Agent.OS'], 'Windows_NT')
                inputs:
                  azureSubscription: symphony_ado_conn
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    #!/bin/env bash
                    set -e

                    ARTIFACTS=(
                      "symphony-api"
                      "symphony-k8s"
                      "helm/symphony"
                    )
                    REGISTRY="symphonycr"
                    BUILD_NUMBER="$(Build.BuildNumber)"

                    ## This locks all generated artifacts in ACR
                    for ARTIFACT in "${ARTIFACTS[@]}"; do
                      az acr repository update \
                        --name "${REGISTRY}" \
                        --image "${ARTIFACT}:${BUILD_NUMBER}" \
                        --write-enabled false
                    done
        dependsOn:
          - build
          - prebuild
schedules: []
